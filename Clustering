import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

selected_columns = [
                    'CreditScore',
                    'Geography_Germany',
                    'Geography_Spain',
                    'Geography_France',
                    'Gender_Male',
                    'Age',
                    'Tenure',
                    'Balance',
                    'NumOfProducts',
                    'HasCrCard',
                    'IsActiveMember',
                    'EstimatedSalary'                    
]

df_cluster = df_train[selected_columns]


scaler = StandardScaler()
X = scaler.fit_transform(df_cluster)

# Define the range of clusters you want to test
min_clusters = 1
max_clusters = 10
clusters_range = range(min_clusters, max_clusters + 1)

# Fit K-Means for each number of clusters and store inertia (within-cluster sum of squares) in a list
inertia = []
for n_clusters in clusters_range:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

# Plot the elbow curve
plt.plot(clusters_range, inertia, marker='o')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Within-Cluster Sum of Squares (Inertia)')
plt.show()


# Choose the number of clusters
num_clusters = 4

# Apply K-Means clustering
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df_cluster['Cluster'] = kmeans.fit_predict(X)

# Analyze each cluster
cluster_analysis = df_cluster.groupby('Cluster').mean()

# Create a heatmap for better visualization
plt.figure(figsize=(12, 8))
sns.heatmap(cluster_analysis.T, annot=True, cmap='viridis', fmt=".2f", linewidths=.5)
plt.title('Cluster Characteristics')
plt.show()
